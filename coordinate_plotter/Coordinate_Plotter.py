# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CoordinatePlotter
                                 A QGIS plugin
 This plugin plots coordinates from user-inputted values.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-09-20
        email                : ithompson@pre-construct.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from PyQt5.QtWidgets import QDialog, QVBoxLayout, QDialogButtonBox, QCheckBox, QButtonGroup
from qgis.core import *
from qgis.gui import QgsMapLayerComboBox, QgsMapToolZoom, QgsSpinBox, QgsProjectionSelectionWidget
from qgis.utils import iface

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Coordinate_Plotter_dialog import CoordinatePlotterDialog
import os.path


class CoordinatePlotter:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CoordinatePlotter_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Coordinate Plotter')
        self.dlg = CoordinatePlotterDialog()
        
        self.dlg.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.dlg.mMapLayerComboBox.setEnabled(False)
        self.dlg.doubleSpinBox_2.setEnabled(False)
        self.dlg.doubleSpinBox.setEnabled(False)
       
        #Signal method to enable Ok button in dialog box
        self.dlg.checkBox.stateChanged.connect(self.layer_type_check)
        self.dlg.layer_checkBox.stateChanged.connect(self.layer_type_check)
        
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CoordinatePlotter', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Coordinate_Plotter/coordinate_plotter_icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Plot coordinates'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Coordinate Plotter'),
                action)
            self.iface.removeToolBarIcon(action)
    
                    
        
    def run(self):
        """Run method that performs all the real work"""
        # Connect the dialog's finished signal to a custom slot
        self.dlg.finished.connect(self.on_dialog_finished)
        
        
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
        
        self.dlg.buttonBox.button(QDialogButtonBox.Ok).setEnabled(False)
    
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        
        # See if OK was pressed
        if result:
           
            if self.dlg.layer_checkBox.isChecked() == True:
                layer = self.dlg.mMapLayerComboBox.currentLayer()
                self.plot(layer)
            
            if self.dlg.checkBox.isChecked() == True:
                crs = QgsProject.instance().crs().authid()
                layer = QgsVectorLayer(f"Point?crs={crs}", "Plotted Coordinate Layer", "memory")
                QgsProject.instance().addMapLayer(layer)
                self.plot(layer)
    

    def plot(self, layer):
        if layer.isValid():
            layer_provider = layer.dataProvider()
            
            parent = iface.mainWindow()
            canvas = iface.mapCanvas()
            
            #Assign User inputted coordinates to X and Y variables
            x = self.dlg.doubleSpinBox.value()
            y = self.dlg.doubleSpinBox_2.value()
            
            #Draw feature from X and Y variables
            new_feature = QgsFeature()
            new_feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x , y)))
            layer_provider.addFeature(new_feature)
            
            #Zoom to new plotted feature and refresh the canvas
            scale=50    
            rect = QgsRectangle(float(x)-scale,float(y)-scale,float(x)+scale,float(y)+scale)
            canvas.setExtent(rect)
            pt = QgsPoint(float(x),float(y))
            canvas.refresh()
            
    
            QMessageBox.information(parent, "Coordinate plotting", "Coordinates successfully plotted:\n X = {} Y = {}".format(x,y))
            self.clean_dialogue()

    def layer_type_check(self):
        if self.dlg.checkBox.isChecked() == True:
            self.dlg.mMapLayerComboBox.setEnabled(False)
            self.dlg.buttonBox.button(QDialogButtonBox.Ok).setEnabled(True)
            self.dlg.doubleSpinBox_2.setEnabled(True)
            self.dlg.doubleSpinBox.setEnabled(True)

        if self.dlg.layer_checkBox.isChecked() == True:
            layer = self.dlg.mMapLayerComboBox.currentLayer()
            if layer != None:
                self.dlg.mMapLayerComboBox.setEnabled(True)
                self.dlg.buttonBox.button(QDialogButtonBox.Ok).setEnabled(True)
                self.dlg.doubleSpinBox_2.setEnabled(True)
                self.dlg.doubleSpinBox.setEnabled(True)
            if layer == None:
                self.dlg.mMapLayerComboBox.setEnabled(False)
                self.dlg.buttonBox.button(QDialogButtonBox.Ok).setEnabled(False)
                self.dlg.doubleSpinBox_2.setEnabled(False)
                self.dlg.doubleSpinBox.setEnabled(False)
             
           
    def dontdonothing(self):
        pass
            
    def clean_dialogue(self):
        #Reset dialog box values 
                
        self.dlg.doubleSpinBox.setValue(0)
        self.dlg.doubleSpinBox_2.setValue(0)
        self.dlg.doubleSpinBox_2.setEnabled(False)
        self.dlg.doubleSpinBox.setEnabled(False)
        self.dlg.mMapLayerComboBox.setEnabled(False)
        
        self.buttonGroup = QButtonGroup()
        self.buttonGroup.addButton(self.dlg.layer_checkBox)
        self.buttonGroup.addButton(self.dlg.checkBox)
        
        self.buttonGroup.setExclusive(False)
        self.dlg.layer_checkBox.setChecked(False)
        self.dlg.checkBox.setChecked(False)
        self.buttonGroup.setExclusive(True)
       
    def on_dialog_finished(self, result):
        #"Slot to handle when the dialog is closed using Cancel.
        if result == QDialog.Rejected:
            self.clean_dialogue()